fn pow(x: f64, y: i32) -> f64 {
    if y == 0 {
        return 1.0;
    }
    if y % 2 == 1 {
        return pow(x, y - 1) * x;
    }
    let b = pow(x, y / 2);
    b * b
}

fn f(x: f64) -> f64 {
    3.2 * pow(x, 5) -8.0 * pow(x, 4) - 3.3 * pow(x, 3) + 12.1 * pow(x, 2) - 2.015 * x - 6.3
}

fn ternary_search(mut lhs: f64, mut rhs: f64) -> f64 {
    let epsilon = 0.000001;
    while rhs - lhs > epsilon {
        let m1 = lhs + (rhs - lhs) / 3.0;
        let m2 = rhs - (rhs - lhs) / 3.0;
        let f1 = f(m1);
        let f2 = f(m2);
        if f1 < f2 {
            lhs = m1;
        } else {
            rhs = m2;
        }
    }
    (lhs + rhs) / 2.0
}

fn main() {
    let x = ternary_search(0.1, 1.8);
    println!("x={}, f(x)={}", x, f(x));
}